{
  "version": 3,
  "sources": [
    "map.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###\n * Federated Wiki : Map Plugin\n *\n * Licensed under the MIT license.\n * https://github.com/fedwiki/wiki-plugin-map/blob/master/LICENSE.txt\n###\n\nescape = (line) ->\n  line\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n\nresolve = (text) ->\n  if wiki?\n    wiki.resolveLinks(text, escape)\n  else\n    escape(text)\n      .replace(/\\[\\[.*?\\]\\]/g,'<internal>')\n      .replace(/\\[.*?\\]/g,'<external>')\n\nhtmlDecode = (escapedText) ->\n  doc = new DOMParser().parseFromString(escapedText, \"text/html\")\n  doc.documentElement.textContent\n\nmarker = (text) ->\n  deg = (m) ->\n    num = +m[0] + m[1]/60 + (m[2]||0)/60/60\n    if m[3].match /[SW]/i then -num else num\n  decimal = /^(-?\\d{1,3}\\.?\\d*)[, ] *(-?\\d{1,3}\\.?\\d*)\\s*(.*)$/\n  nautical = /^(\\d{1,3})°(\\d{1,2})'(\\d*\\.\\d*)?\"?([NS]) (\\d{1,3})°(\\d{1,2})'(\\d*\\.\\d*)?\"?([EW]) (.*)$/i\n  return {lat: +m[1], lon: +m[2], label: resolve(m[3])} if m = decimal.exec text\n  return {lat: deg(m[1..4]), lon: deg(m[5..8]), label: resolve(m[9])} if m = nautical.exec text\n  null\n\nlineup = ($item) ->\n  return [{lat: 51.5, lon: 0.0, label: 'North Greenwich'}] unless wiki?\n  lineupMarkers = []\n  candidates = $(\".item:lt(#{$('.item').index($item)})\")\n  if (who = candidates.filter \".marker-source\").size()\n    lineupMarkers = lineupMarkers.concat div.markerData() for div in who\n  lineupMarkers\n\nparse = (item, $item) ->\n  text = item.text\n  # parsing the plugin text in context of any frozen items\n  captions = []\n  markers = []\n  lineupMarkers = null \n  overlays = null\n  boundary = null\n  weblink = null\n  tools = {}\n  if item.frozen\n    markers = markers.concat item.frozen\n  for line in text.split /\\n/\n    if m = marker line\n      m.weblink = weblink if weblink?\n      markers.push m\n    else if m = /^BOUNDARY *(.*)?$/.exec line\n      hints = if hint = marker m[1] then [hint] else []\n      boundary = markers.concat [] unless boundary?\n      boundary = boundary.concat hints\n    else if /^LINEUP/.test line\n      tools['freeze'] = true\n      lineupMarkers = lineup($item)\n      if !item.frozen\n        markers = markers.concat lineupMarkers\n    else if m = /^WEBLINK *(.*)$/.exec line\n      weblink = m[1]\n    else if m = /^OVERLAY *(.+?) ([+-]?\\d+\\.\\d+), ?([+-]?\\d+\\.\\d+) ([+-]?\\d+\\.\\d+), ?([+-]?\\d+\\.\\d+)$/.exec line\n      overlays = (overlays||[]).concat {url:m[1], bounds:[[m[2],m[3]],[m[4],m[5]]]}\n    else if /^LOCATE/.test line\n      tools['locate'] = true\n    else if /^SEARCH/.test line\n      tools['search'] = true\n    else\n      captions.push resolve(line)\n\n  # remove any duplicate markers\n  markers = Array.from(new Set(markers.map(JSON.stringify))).map(JSON.parse)\n  lineupMarkers = Array.from(new Set(lineupMarkers.map(JSON.stringify))).map(JSON.parse) if lineupMarkers\n\n  boundary = markers unless boundary?\n  result = {markers, caption: captions.join('<br>'), boundary}\n  result.lineupMarkers = lineupMarkers if lineupMarkers\n  result.tools = tools if Object.keys(tools).length > 0\n  result.weblink = weblink if weblink?\n  result.overlays = overlays if overlays?\n  result\n\nfeature = (marker) ->\n  type: 'Feature'\n  geometry:\n    type: 'Point'\n    coordinates: [marker.lon, marker.lat]\n    properties:\n      label: marker.label\n\nemit = ($item, item) ->\n  {caption, markers, lineupMarkers, boundary, weblink, overlays, tools} = parse item, $item\n\n  # announce our capability to produce markers in native and geojson format\n\n  $item.addClass 'marker-source'\n\n  showing = []\n  $item.get(0).markerData = ->\n    opened = showing.filter (s) -> s.leaflet._popup._isOpen\n    if opened.length\n      opened.map (s) -> s.marker\n    else\n      parse(item).markers\n\n  $item.get(0).markerGeo = ->\n    type: 'FeatureCollection'\n    features: parse(item).markers.map(feature)\n\n  if (!$(\"link[href='https://unpkg.com/leaflet@1.7.1/dist/leaflet.css']\").length)\n    $('<link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.7.1/dist/leaflet.css\">').appendTo(\"head\")\n  if (!$(\"link[href='/plugins/map/map.css']\").length)\n    $('<link rel=\"stylesheet\" href=\"/plugins/map/map.css\" type=\"text/css\">').appendTo(\"head\")\n\n  wiki.getScript \"https://unpkg.com/leaflet@1.7.1/dist/leaflet.js\", ->\n\n    mapId = \"map-#{Math.floor(Math.random()*1000000)}\"\n\n    $item.append \"\"\"\n      <figure style=\"padding: 8px;\">\n        <div id=\"#{mapId}\" style='height: 300px;'></div>\n        <p class=\"caption\">#{caption}</p>\n      </figure>\n    \"\"\"\n\n    map = L.map(mapId, {\n      scrollWheelZoom: false\n      })\n\n    update = ->\n      wiki.pageHandler.put $item.parents('.page:first'),\n        type: 'edit',\n        id: item.id,\n        item: item\n      wiki.doPlugin $item.empty(), item\n\n    # add locate control\n    if tools?.locate\n      if (!$(\"link[href='https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css']\").length)\n        $('<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\">').appendTo(\"head\")\n      if (!$(\"link[href='https://cdn.jsdelivr.net/npm/leaflet.locatecontrol@0.72.0/dist/L.Control.Locate.min.css'\"))\n        $('<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/leaflet.locatecontrol@0.72.0/dist/L.Control.Locate.min.css\">').appendTo(\"head\")\n      wiki.getScript \"https://cdn.jsdelivr.net/npm/leaflet.locatecontrol@0.72.0/dist/L.Control.Locate.min.js\", ->\n        L.control.locate({\n          position: 'topleft'\n          flyTo: true\n          drawCircle: true\n          drawMarker: false}).addTo(map)\n\n    # add search control\n    if tools?.search\n      if (!$(\"link[href='https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css']\").length)\n        $('<link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css\" />').appendTo(\"head\")  \n      wiki.getScript \"https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js\", ->\n        geocoder = L.Control.geocoder({\n          defaultMarkGeocode: false\n        }).on('markgeocode', (e) ->\n          new L.marker([e.geocode.center.lat,e.geocode.center.lng],{\n            title: e.geocode.name\n          }).addTo(map)\n          boundary.push {\n            lat: e.geocode.center.lat\n            lon: e.geocode.center.lng}\n          if boundary.length > 1\n            bounds = new L.LatLngBounds [ [p.lat, p.lon] for p in boundary ]\n            map.flyToBounds bounds\n          else if boundary.length == 1\n            p = boundary[0]\n            map.flyTo([p.lat, p.lon], item.zoom || 13)\n          item.text +=\"\\n#{e.geocode.center.lat.toFixed 7}, #{e.geocode.center.lng.toFixed 7} #{e.geocode.name}\"\n          update()\n          ).addTo(map)\n\n    #\n    if tools?.freeze\n      freezeControl = L.Control.extend({\n        options: {\n          position: 'topright'\n        }\n\n        onAdd: (map) ->\n          container = L.DomUtil.create('div', 'leaflet-bar leaflet-control')\n          container.innerHTML = \"\"\"\n          <a class=\"leaflet-bar-part leaflet-bar-part-single\" href=\"#\" style=\"outline: currentcolor none medium;\">\n            <span style=#{item.frozen? 'color: black;' : 'color: blue;'}>❄︎</span>\n          </a>\n          \"\"\"\n\n          newMarkers = []\n          newMarkerGroup = null\n          \n          container.onclick = (e) ->\n            if e.shiftKey\n              e.preventDefault()\n              e.stopPropagation()\n              if item.frozen\n                delete item.frozen\n                update()\n            else\n              toFreeze = []\n              if item.frozen\n                toFreeze = Array.from(new Set(item.frozen.concat(lineupMarkers).map(JSON.stringify))).map(JSON.parse)\n              else\n                toFreeze = lineupMarkers\n              # only update if there realy is something new to freeze or it has changed...\n              if (item.frozen and (toFreeze.length != item.frozen.length)) or (!item.frozen and toFreeze.length > 0)\n              #(!item.frozen and toFreeze.length > 0) or toFreeze.length != item.frozen.length\n                item.frozen = toFreeze\n                update()\n          \n          # mouse over will show any extra markers that will be added on a re-freeze.\n          container.addEventListener 'mouseenter', (e) ->\n            m = new Set(markers.map(JSON.stringify))\n            l = new Set(lineupMarkers.map(JSON.stringify))\n            newMarkers = Array.from(new Set(Array.from(l).filter((x) -> !m.has(x)))).map(JSON.parse)\n            if newMarkers.length > 0\n              newMarkerGroup = L.layerGroup().addTo(map)\n              newMarkers.forEach (mark) ->\n                L.marker([mark.lat, mark.lon]).addTo(newMarkerGroup)\n              tmpBoundary = boundary.concat newMarkers\n              bounds = new L.LatLngBounds [ [p.lat, p.lon] for p in tmpBoundary ]\n              map.flyToBounds bounds\n\n          container.addEventListener 'mouseleave', (e) ->\n            if newMarkers.length > 0\n              newMarkerGroup.remove()\n              if boundary.length > 1\n                bounds = new L.LatLngBounds [ [p.lat, p.lon] for p in boundary ]\n                map.flyToBounds bounds\n              else if boundary.length == 1\n                p = boundary[0]\n                map.flyTo([p.lat, p.lon], item.zoom || 13)\n              else\n                map.flyTo(item.latlng || item.latLng || [40.735383, -73.984655], item.zoom || 13)\n          \n          return container\n\n        onRemove: (map) ->\n          # Nothing to do here...\n\n      })\n      map.addControl(new freezeControl())\n\n\n    # stop dragging the map from propagating and dragging the page item.\n    mapDiv = L.DomUtil.get(\"#{mapId}\")\n    L.DomEvent.disableClickPropagation(mapDiv)\n\n    map.doubleClickZoom.disable()\n    map.on 'dblclick', (e) ->\n      if e.originalEvent.shiftKey\n        e.originalEvent.stopPropagation()\n        new L.marker(e.latlng).addTo(map)\n        item.text += \"\\n#{e.latlng.lat.toFixed 7}, #{e.latlng.lng.toFixed 7}\"\n        update()\n\n\n    # select tiles, default to OSM\n    tile = item.tile || \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    tileCredits  = item.tileCredits || '© <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n\n    L.tileLayer(tile, {\n      attribution: tileCredits\n      }).addTo(map)\n\n    # add specialized map overlays\n    for o in overlays||[]\n      L.imageOverlay(o.url, o.bounds, {opacity:0.6, interactive:true}).addTo(map)\n\n    openWeblink = (e) ->\n      return unless link = e.target.options.weblink\n      window.open (link\n        .replace(/\\{LAT}/, e.latlng.lat)\n        .replace(/\\{(LON|LNG)}/, e.latlng.lng))\n\n    showMarkers = (markers) ->\n      return unless markers\n      for p in markers\n        markerLabel  = htmlDecode(wiki.resolveLinks(p.label))\n        mkr = L.marker([p.lat, p.lon], {weblink: p.weblink || weblink})\n          .on( 'dblclick', openWeblink)\n          .bindPopup( markerLabel )\n          .openPopup()\n          .addTo(map);\n        showing.push {leaflet:mkr, marker:p}\n\n    # add markers on the map\n    showMarkers markers\n\n    # center map on markers or item properties\n    if boundary.length > 1\n      bounds = new L.LatLngBounds [ [p.lat, p.lon] for p in boundary ]\n      map.fitBounds bounds\n    else if boundary.length == 1\n      p = boundary[0]\n      map.setView([p.lat, p.lon], item.zoom || 13)\n    else\n      map.setView(item.latlng || item.latLng || [40.735383, -73.984655], item.zoom || 13)\n\n    # announce our capability to produce a region\n\n    $item.addClass 'region-source'\n\n    $item.get(0).regionData = ->\n      region = map.getBounds()\n      return {\n        north: region.getNorth()\n        south: region.getSouth()\n        east: region.getEast()\n        west: region.getWest()\n      }\n\n\nbind = ($item, item) ->\n  $item.dblclick ->\n    wiki.textEditor $item, item\n\n\nwindow.plugins.map = {emit, bind} if window?\nmodule.exports = {marker, parse} if module?\n"
  ],
  "sourceRoot": ""
}