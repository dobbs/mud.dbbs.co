{
  "version": 3,
  "sources": [
    "radar.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###\n * Federated Wiki : Radar Plugin\n *\n * Licensed under the MIT license.\n * https://github.com/fedwiki/wiki-plugin-radar/blob/master/LICENSE.txt\n###\n\nwindow.plugins.radar =\n  bind: (div, item) ->\n  emit: (div, item) ->\n    wiki.getScript '/js/d3/d3.min.js', ->\n      div.append '''\n        <style>\n        svg { font: 10px sans-serif; }\n       </style>\n      '''\n\n      limit = {}\n      keys = []\n      max = -Infinity\n\n      value = (obj) ->\n        return NaN unless obj?\n        switch obj.constructor\n          when Number then obj\n          when String then +obj\n          when Array then value(obj[0])\n          when Object then value(obj.value)\n          when Function then obj()\n          else NaN\n\n      parseText = (text) ->\n        for line in text.split \"\\n\"\n          if args = line.match /^([0-9.eE-]+) +([\\w \\/%(){},&-]+)$/\n            keys.push args[2]\n            limit[args[2]] = +args[1]\n          else if args = line.match /^([0-9\\.eE-]+)$/\n            max = +args[1]\n          else if args = line.match /^ *([\\w \\/%(){},&-]+)$/\n            keys.push args[1]\n        wiki.log 'radar parseText', keys, limit, max\n\n      limitsFromData = (data) ->\n        limit = {}\n        for d in data\n          for k,v of d\n            vv = value v\n            unless isNaN vv\n              wiki.log 'limits from data keys', k, v, vv\n              if limit[k]\n                limit[k] = vv if vv > limit[k]\n              else\n                limit[k] = vv\n        wiki.log 'limits from data', limit\n\n      candidates = $(\".item:lt(#{$('.item').index(div)})\")\n      if (who = candidates.filter \".radar-source\").size()\n        data = (d.radarData() for d in who)\n      else if (who = candidates.filter \".data\").size()\n        rows = who.filter (d) -> $(this).data('item').data.length == 1\n        if rows.length > 0\n          data = ($(d).data('item').data[0] for d in rows)\n        else\n          data = who.last().data('item').data\n      else throw \"Can't find suitable data\"\n      wiki.log 'radar data', data\n\n      if item.text? and item.text.match(/\\S/)\n        parseText item.text\n        if _.isEmpty limit\n          if max == -Infinity\n            limitsFromData data\n          else\n            if _.isEmpty keys\n              limitsFromData data\n              keys = Object.keys limit\n            limit[k] = max for k in keys\n      else\n        limitsFromData data\n        keys = Object.keys limit\n      wiki.log 'radar limit', limit\n\n      complete = (object) ->\n        for key in keys\n          return false unless object[key]?\n        true\n\n      merged = []\n      merging = {}\n      for each in data\n        _.extend merging, each\n        if complete(merging)\n          merged.push merging\n          merging = {}\n      data = merged\n\n      percents = (obj) ->\n        for k in keys\n          unless obj[k]?\n            throw \"Missing value for '#{k}'\"\n        (100.0*value(obj[k])/limit[k] for k in keys.concat(keys[0]))\n\n      div.dblclick (e) ->\n        if e.shiftKey\n          wiki.dialog \"JSON for Radar plugin\",  $('<pre/>').text(JSON.stringify(item, null, 2))\n        else\n          unless item.text? and item.text.match(/\\S/)\n            item.text = (\"#{limit[k]} #{k}\" for k in keys).join \"\\n\"\n          wiki.textEditor div, item\n\n      # div.append \"<p>#{JSON.stringify(keys)}</p>\"\n      # div.append \"<p>#{JSON.stringify(limit)}</p>\"\n\n      # Adapted from https://gist.github.com/1630683\n\n      w = 400\n      h = 400\n      vizPadding =\n        top: 10\n        right: 0\n        bottom: 15\n        left: 0\n\n      dimension = keys.length\n      ruleColor = \"#EEE\"\n\n      angle = (i) ->\n        (i / dimension) * 2 * Math.PI\n      rotate = (i) ->\n        \"rotate(#{((i / dimension * 360) - 90)})\"\n      translate = (percent) ->\n       \"translate(#{radius maxVal * percent/100 })\"\n\n      series = (percents(d) for d in data)\n      wiki.log 'radar series', series\n      comments = []\n      for m in [0..data.length-1]\n        for d in [0..dimension-1]\n          if (o = data[m][keys[d]])?\n           if (c = o.comment)?\n            comments.push\n              material: m, dimension: d, comment: c\n\n      hours = [0..dimension-1]\n      minVal = 0\n      maxVal = 100\n\n      viz = d3.select(div.get(0))\n        .append(\"svg:svg\")\n        .attr(\"width\", w)\n        .attr(\"height\", h)\n        .attr(\"class\", \"vizSvg\")\n      vizBody = viz.append(\"svg:g\")\n        .attr(\"id\", \"body\")\n\n      heightCircleConstraint = h - vizPadding.top - vizPadding.bottom\n      widthCircleConstraint = w - vizPadding.left - vizPadding.right\n      circleConstraint = d3.min([ heightCircleConstraint, widthCircleConstraint ])\n      radius = d3.scale.linear()\n        .domain([ minVal, maxVal ])\n        .range([ 0, (circleConstraint / 2) ])\n      radiusLength = radius(maxVal)\n      centerXPos = widthCircleConstraint / 2 + vizPadding.left\n      centerYPos = heightCircleConstraint / 2 + vizPadding.top\n      vizBody.attr \"transform\", \"translate(#{centerXPos},#{centerYPos})\" + rotate(0)\n\n      lastThumb = null\n      who.bind 'thumb', (e, thumb) ->\n        return if thumb == lastThumb || -1 == (index = keys.indexOf lastThumb = thumb)\n        vizBody.transition().duration(750)\n          .attr \"transform\", \"translate(#{centerXPos},#{centerYPos})\" + rotate(-index)\n\n      radialTicks = radius.ticks(5)\n      circleAxes = vizBody.selectAll(\".circle-ticks\")\n        .data(radialTicks)\n        .enter()\n        .append(\"svg:g\")\n        .attr(\"class\", \"circle-ticks\")\n      circleAxes.append(\"svg:circle\")\n        .attr(\"r\", (d, i) -> radius d )\n        .attr(\"class\", \"circle\")\n        .style(\"stroke\", ruleColor)\n        .style \"fill\", \"none\"\n      circleAxes.append(\"svg:text\")\n        .attr(\"text-anchor\", \"end\")\n        .style(\"stroke\", ruleColor)\n        .attr(\"dy\", (d) -> -1 * radius(d) )\n        .text String\n\n      lineAxes = vizBody.selectAll(\".line-ticks\")\n        .data(hours)\n        .enter()\n        .append(\"svg:g\")\n        .attr(\"transform\", (d, i) -> rotate(i)+translate(100) )\n        .attr(\"class\", \"line-ticks\")\n      lineAxes.append(\"svg:line\")\n        .attr(\"x2\", -1 * radius(maxVal))\n        .style(\"stroke\", ruleColor)\n        .style \"fill\", \"none\"\n      lineAxes.append(\"svg:text\")\n        .text((d,i) -> keys[i][0..19])\n        .attr('x',5)\n        .attr('y',-5)\n        .attr(\"text-anchor\", \"start\")\n        .style(\"stroke\", ruleColor)\n        .style(\"cursor\", 'pointer')\n        .style(\"font-size\",\"14px\")\n        .attr(\"transform\", \"rotate(180)\")\n        .on(\"click\", (d,i) ->\n          wiki.doInternalLink keys[i], $(div).parents('.page')\n        )\n\n      fill = d3.scale.category10()\n      colorSelector = (d, i) -> fill i\n      vizBody.selectAll(\".series\")\n        .data(series)\n        .enter()\n        .append(\"svg:g\")\n        .attr(\"class\", \"series\")\n        .append(\"svg:path\")\n        .attr(\"class\", \"line\")\n        .style(\"fill\", colorSelector)\n        .style(\"stroke\", colorSelector)\n        .style(\"stroke-width\", 3)\n        .style(\"fill-opacity\", .1)\n        .style(\"fill\", colorSelector)\n        .attr(\"d\", d3.svg.line.radial()\n          .radius((d) -> radius(if d? and !isNaN(d) then d else 0))\n          .angle((d, i) -> angle i ))\n        .append(\"svg:title\").text((d,i) -> data[i][\"Material name\"])\n\n        vizBody.selectAll(\".comments\")\n          .data(comments)\n          .enter()\n          .append(\"svg:g\")\n          .attr(\"class\", \"comments\")\n          .append(\"svg:text\")\n          .style(\"font-size\", \"40px\")\n          .style(\"fill\", colorSelector)\n          .attr(\"text-anchor\", \"mid\")\n          .attr(\"transform\", (d) ->\n            percent = series[d.material][d.dimension]\n            rotate(d.dimension)+translate(percent) )\n          .text('*')\n          .append(\"svg:title\").text((d) -> d.comment)\n"
  ],
  "sourceRoot": ""
}