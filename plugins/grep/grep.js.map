{
  "version": 3,
  "sources": [
    "grep.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###\n * Federated Wiki : Grep Plugin\n *\n * Licensed under the MIT license.\n * https://github.com/fedwiki/wiki-plugin-grep/blob/master/LICENSE.txt\n###\n\nescape = (line) ->\n  line\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n\nword = (string) ->\n  throw {message:\"expecting type for '#{string}'\"} unless string.match /^[a-z]*$/\n  string\n\nparse = (text) ->\n  program = []\n  listing = []\n  errors = 0\n  for line in text.split(\"\\n\")\n    html = escape line\n    try\n      [match, op, arg] = line.match(/^\\s*(\\w*)\\s*(.*)$/)\n      switch op\n        when '' then\n        when 'ITEM','ACTION' then program.push {op, type:word(arg)}\n        when 'TEXT','TITLE','SITE','ID','ALIAS','JSON' then program.push {op, regex: new RegExp(arg,'mi')}\n        else throw {message:\"don't know '#{op}' command\"}\n    catch err\n      errors++\n      html = \"\"\"<span style=\"background-color:#fdd;width:100%;\" title=\"#{err.message}\">#{html}</span>\"\"\"\n    listing.push html\n  [program, listing.join('<br>'), errors]\n\nevalPage = (page, steps, count) ->\n  return true unless count < steps.length\n  step = steps[count]\n  switch step.op\n    when 'ITEM'\n      count++\n      for item in page.story || []\n        if step.type == ''\n          return true if evalPart item, steps, count\n        else\n          if item.type is step.type\n            return true if evalPart item, steps, count\n      return false\n    when 'ACTION'\n      count++\n      for action in page.journal || []\n        if step.type == ''\n          return true if evalPart action, steps, count\n        else\n          if action.type is step.type\n            return true if evalPart action, steps, count\n      return false\n  evalPart page, steps, count\n\nevalPart = (part, steps, count) ->\n  return true unless count < steps.length\n  step = steps[count++]\n  switch step.op\n    when 'TEXT','TITLE','SITE','ID','ALIAS'\n      key = step.op.toLowerCase()\n      return true if (part[key] || part.item?[key] || '').match step.regex\n    when 'JSON'\n      json = JSON.stringify part, null, ' '\n      return true if json.match step.regex\n  false\n\nrun = ($item, program) ->\n\n  status = (text) ->\n    $item.find('.caption').text text\n\n  want = (page) ->\n    evalPage page, program, 0\n\n  status \"fetching sitemap\"\n  $.getJSON \"//#{location.host}/system/sitemap.json\", (sitemap) ->\n    checked = 0\n    found = 0\n    for place in sitemap\n      $.getJSON \"//#{location.host}/#{place.slug}.json\", (page) ->\n        text = \"[[#{page.title}]] (#{page.story.length})\"\n        if want page\n          found++\n          $item.find('.result').append \"#{wiki.resolveLinks text}<br>\"\n        checked++\n        report = \"found #{found} pages of #{checked} checked\"\n        report += \", #{sitemap.length - checked} remain\" if checked < sitemap.length\n        status report\n\nemit = ($item, item) ->\n  [program, listing, errors] = parse item.text\n  caption = if errors then \"#{errors} errors\" else 'ready'\n  $item.append \"\"\"\n    <div style=\"background-color:#eee;padding:15px;\">\n      <div style=\"text-align:center\">\n        <div class=listing>#{listing} <a class=open href='#'>Â»</a></div>\n        <button>find</button>\n        <p class=\"caption\">#{caption}</p>\n      </div>\n      <p class=\"result\"></p>\n    </div>\n  \"\"\"\n\nopen_all = (this_page, titles) ->\n  for title in titles\n    wiki.doInternalLink title, this_page\n    this_page = null\n\nbind = ($item, item) ->\n  $item.dblclick -> wiki.textEditor $item, item\n  $item.find('button').click (e) ->\n    [program, listing, errors] = parse item.text\n    run $item, program unless errors\n  $item.find('a.open').click (e) ->\n    e.stopPropagation()\n    e.preventDefault()\n    this_page = $item.parents('.page') unless e.shiftKey\n    open_all this_page, $item.find('a.internal').map -> $(this).text()\n\n\n\nwindow.plugins.grep = {emit, bind} if window?\nmodule.exports = {parse, evalPart, evalPage} if module?\n"
  ],
  "sourceRoot": ""
}