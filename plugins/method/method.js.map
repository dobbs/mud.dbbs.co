{
  "version": 3,
  "sources": [
    "method.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###\n * Federated Wiki : Method Plugin\n *\n * Licensed under the MIT license.\n * https://github.com/fedwiki/wiki-plugin-method/blob/master/LICENSE.txt\n###\n\n############ units ############\n\nconversions = null\n\nasValue = (obj) ->\n  return NaN unless obj?\n  switch obj.constructor\n    when Number then obj\n    when String then +obj\n    when Array then asValue(obj[0])\n    when Object then asValue(obj.value)\n    when Function then asValue obj()\n    else NaN\n\nasUnits = (obj) ->\n  return [] unless obj?\n  switch obj.constructor\n    when Number then []\n    when String then []\n    when Array then asUnits(obj[0])\n    when Object\n      if obj.units? then obj.units\n      else if obj.value? then asUnits obj.value\n      else []\n    when Function then units(obj())\n    else []\n\nparseUnits = (string) ->\n  string = string.toLowerCase()\n  string = string.replace /\\bsquare\\s+(\\w+)\\b/, \"$1 $1\"\n  string = string.replace /\\bcubic\\s+(\\w+)\\b/, \"$1 $1 $1\"\n  units = string.match /(\\w+)/g\n  return [] unless units?\n  units.sort()\n\nparseRatio = (string) ->\n  if ratio = string.match /^\\((.+?)\\/(.+?)\\)$/\n    {numerator: parseUnits(ratio[1]), denominator: parseUnits(ratio[2])}\n  else if units = string.match /^\\((.+?)\\)$/\n    parseUnits units[1]\n  else undefined\n\nparseLabel = (string) ->\n  if phrases = string.match(/(\\(.+?\\)).*?(\\(.+?\\))?[^(]*$/)\n    result = {}\n    result.units = parseRatio phrases[1]\n    result.from = parseRatio phrases[2] if phrases[2]\n  result\n\nextend = (object, properties) ->\n  for key, val of properties\n    object[key] = val\n  object\n\nemptyArray = (obj) ->\n  obj.constructor is Array and obj.length is 0\n\nsimplify = (obj) ->\n  return NaN unless obj?\n  switch obj.constructor\n    when Number then obj\n    when String then +obj\n    when Array then simplify(obj[0])\n    when Object\n      if obj.units == undefined then simplify obj.value\n      else if emptyArray obj.units then simplify obj.value\n      else obj\n    when Function then simplify obj()\n    else NaN\n\ninspect = (obj) ->\n  return \"nullish\" unless obj?\n  switch obj.constructor\n    when Number then obj\n    when String then obj\n    when Array then JSON.stringify(obj).replace /\\\"/g, ''\n    when Object then JSON.stringify(obj).replace /\\\"/g, ''\n    when Function then 'functionish'\n    else \"wierdish\"\n\nfindFactor = (to, from) ->\n  for label, value of conversions\n    if value.from? and isEqual from, value.from\n      if isEqual to, value.units\n        return asValue value\n    if value.from? and isEqual to, value.from\n      if isEqual from, value.units\n        return 1/(asValue value)\n  return null\n\nhasUnits = (obj) ->\n  not emptyArray asUnits obj\n\nisEqual = (a, b) ->\n  (inspect a) is (inspect b)\n\ncoerce = (toUnits, value) ->\n  # console.log \"coerce to #{inspect toUnits}\"\n  if isEqual toUnits, fromUnits = asUnits simplify value\n    value\n  else if factor = findFactor toUnits, fromUnits\n    return {value: factor * asValue(value), units: toUnits}\n  else\n    throw new Error \"can't convert to #{inspect toUnits} from #{inspect fromUnits}\"\n\nunpackUnits = (value) ->\n  v = asValue value\n  u = asUnits value\n  if u.constructor is Array\n    numerator = u\n    denominator = []\n  else\n    numerator = u.numerator\n    denominator = u.denominator\n  [v, numerator, denominator]\n\npackUnits = (nums, denoms) ->\n  n = [].concat nums...\n  d = [].concat denoms...\n  keep = []\n  for unit in d\n    if (where = n.indexOf unit) is -1\n      keep.push unit\n    else\n      n.splice where, 1\n  if keep.length\n    {numerator: n.sort(), denominator: keep.sort()}\n  else\n    n.sort()\n\nprintUnits = (units) ->\n  if emptyArray units\n    ''\n  else if units.constructor is Array\n    \"( #{units.join ' '} )\"\n  else\n    \"( #{units.numerator.join ' '} / #{units.denominator.join ' '} )\"\n\n\n############ calculation ############\n\nsum = (v) ->\n  simplify v.reduce (sum, each) ->\n    toUnits = asUnits simplify each\n    value = coerce toUnits, sum\n    {value: asValue(value) + asValue(each), units: toUnits }\n\ndifference = (v) ->\n  # list[0] - list[1]\n  toUnits = asUnits simplify v[1]\n  value = coerce toUnits, v[0]\n  {value: asValue(value) - asValue(v[1]), units: toUnits }\n\nproduct = (v) ->\n  simplify v.reduce (prod, each) ->\n    [p, pn, pd] = unpackUnits prod\n    [e, en, ed] = unpackUnits each\n    {value: p*e, units: packUnits([pn,en],[pd,ed])}\n\nratio = (v) ->\n  # list[0] / list[1]\n  [n, nn, nd] = unpackUnits v[0]\n  [d, dn, dd] = unpackUnits v[1]\n  simplify {value: n/d, units: packUnits([nn,dd],[nd,dn])}\n\navg = (v) ->\n  sum(v)/v.length\n\nround = (n) ->\n  return '?' unless n?\n  if n.toString().match /\\.\\d\\d\\d/\n    n.toFixed 2\n  else\n    n\n\nannotate = (text) ->\n  return '' unless text?\n  \" <span title=\\\"#{text}\\\">*</span>\"\n\nprint = (report, value, hover, line, comment, color, linenum=0, unpatched=value) ->\n  return unless report?\n  long = ''\n  if line.length > 40\n    long = line\n    line = \"#{line.substr 0, 20} ... #{line.substr -15}\"\n  report.push \"\"\"\n    <tr style=\"background:#{color};\">\n      <td class=\"value\"\n        data-value=\"#{asValue unpatched}\"\n        data-linenum=\"#{linenum}\"\n        style=\"width: 20%; text-align: right; padding: 0 4px;\"\n        title=\"#{hover||''}\">\n          <b>#{round asValue value}</b>\n      <td title=\"#{long}\">#{line}#{annotate comment}</td>\n    \"\"\"\n\n############ expression ############\n\nident = (str, syms) ->\n  if str.match /^\\d+(\\.\\d+)?(e\\d+)?$/\n    Number str\n  else\n    regexp = new RegExp \"\\\\b#{str}\\\\b\"\n    for label, value of syms\n      return value if label.match regexp\n    throw new Error \"can't find value for '#{str}'\"\n\nlexer = (str, syms={}) ->\n  buf = []\n  tmp = \"\"\n  i = 0\n  while i < str.length\n    c = str[i++]\n    continue  if c is \" \"\n    if c in [\"+\", \"-\", \"*\", \"/\", \"(\", \")\"]\n      if tmp\n        buf.push ident(tmp, syms)\n        tmp = \"\"\n      buf.push c\n      continue\n    tmp += c\n  buf.push ident(tmp, syms) if tmp\n  buf\n\nparser = (lexed) ->\n  # term : fact { (*|/) fact }\n  # fact : number | '(' expr ')'\n  fact = ->\n    c = lexed.shift()\n    return c  if typeof(c) in [\"number\", \"object\"]\n    if c is \"(\"\n      c = expr()\n      throw new Error \"missing paren\"  if lexed.shift() isnt \")\"\n      return c\n    throw new Error \"missing value\"\n  term = ->\n    c = fact()\n    while lexed[0] in [\"*\", \"/\"]\n      o = lexed.shift()\n      c = product [c, term()]  if o is \"*\"\n      c = ratio [c, term()]  if o is \"/\"\n    c\n  expr = ->\n    c = term()\n    while lexed[0] in [\"+\", \"-\"]\n      o = lexed.shift()\n      c = sum [c, term()]  if o is \"+\"\n      c = difference [c, term()]  if o is \"-\"\n    c\n  expr()\n\n############ interpreter ############\n\ndispatch = (state, done) ->\n  state.list ||= []\n  state.input ||= {}\n  state.output ||= {}\n  state.local ||= {}\n  state.patch ||= {}\n  state.lines ||= state.item.text.split \"\\n\"\n  state.linenum ||= 0\n  state.linenum += 1\n  line = state.lines.shift()\n  return done state unless line?\n\n  attach = (search) ->\n    for elem in wiki.getDataNodes state.div\n      if (source = $(elem).data('item')).text.indexOf(search) >= 0\n        return source.data\n    throw new Error \"can't find dataset with caption #{search}\"\n\n  lookup = (v) ->\n    table = attach 'Tier3ExposurePercentages'\n    return NaN if isNaN v[0]\n    return NaN if isNaN v[1]\n    row = _.find table, (row) ->\n      asValue(row.Exposure)==v[0] and asValue(row.Raw)==v[1]\n    throw new Error \"can't find exposure #{v[0]} and raw #{v[1]}\" unless row?\n    asValue(row.Percentage)\n\n  polynomial = (v, subtype) ->\n    table = attach 'Tier3Polynomials'\n    row = _.find table, (row) ->\n      \"#{row.SubType} Scaled\" == subtype and asValue(row.Min) <= v and asValue(row.Max) > v\n    throw new Error \"can't find applicable polynomial for #{v} in '#{subtype}'\" unless row?\n    result  = asValue(row.C0)\n    result += asValue(row.C1) * v\n    result += asValue(row.C2) * Math.pow(v,2)\n    result += asValue(row.C3) * Math.pow(v,3)\n    result += asValue(row.C4) * Math.pow(v,4)\n    result += asValue(row.C5) * Math.pow(v,5)\n    result += asValue(row.C6) * Math.pow(v,6)\n    result = 1 - result if asValue(row['One minus'])\n    Math.min(1, Math.max(0, result))\n\n  show = (list, legend) ->\n    value = sum list\n    legend += \"<br>#{printUnits asUnits value}\" if emptyArray(asUnits parseLabel legend)\n    readout = Number(asValue value).toLocaleString('en')\n    state.show ||= []\n    state.show.push {readout, legend}\n    value\n\n  apply = (name, list, label='') ->\n    result = switch name\n      when 'SUM' then sum list\n      when 'AVG', 'AVERAGE' then avg list\n      when 'MIN', 'MINIMUM' then _.min list\n      when 'MAX', 'MAXIMUM' then _.max list\n      when 'RATIO' then ratio list\n      when 'ACCUMULATE' then (sum list) + (output[label] or input[label] or 0)\n      when 'FIRST' then list[0]\n      when 'PRODUCT' then product list\n      when 'LOOKUP' then lookup list\n      when 'POLYNOMIAL' then polynomial list[0], label\n      when 'SHOW' then show list, label\n      when 'CALC' then parser lexer(label, state.local)\n      else throw new Error \"don't know how to '#{name}'\"\n    if name is 'CALC' or emptyArray toUnits = asUnits parseLabel label\n      result\n    else\n      coerce toUnits, result\n\n  unpatched = null\n  patch = (value) ->\n    unpatched = value\n    state.patch[state.linenum] || value\n\n  color = '#eee'\n  value = comment = hover = null\n  conversions = input = state.input\n  output = state.output\n  local = state.local\n  list = state.list\n  label = null\n\n  try\n\n    # 99.9 Label (units)\n    if args = line.match /^([0-9.eE-]+) +([\\w \\.%(){},&\\*\\/+-]+)$/\n      result = patch +args[1]\n      units = parseLabel label = args[2]\n      result = extend {value: result}, units if units\n      local[label] = output[label] = value = result\n\n    # OPERATION Label (units)\n    else if args = line.match /^([A-Z]+) +([\\w \\.%(){},&\\*\\/+-]+)$/\n      [value, list, count] = [apply(args[1], list, args[2]), [], list.length]\n      color = '#ddd'\n      hover = \"#{args[1]} of #{count} numbers\\n= #{asValue value} #{printUnits asUnits value}\"\n      label = args[2]\n      if (output[label]? or input[label]?) and !state.item.silent\n        previous = asValue(output[label]||input[label])\n        if Math.abs(change = value/previous-1) > 0.0001\n          comment = \"previously #{previous}\\nΔ #{round(change*100)}%\"\n      local[label] = output[label] = value\n      if (s = state.item.checks) && (v = s[label]) != undefined\n        if asValue(v).toFixed(4) != asValue(value).toFixed(4)\n          color = '#faa'\n          label += \" != #{asValue(v).toFixed(4)}\"\n          state.caller.errors.push({message: label}) if state.caller\n\n    # OPERATION\n    else if args = line.match /^([A-Z]+)$/\n      [value, list, count] = [apply(args[1], list), [], list.length]\n      value = patch value\n      local[args[1]] = value\n      color = '#ddd'\n      hover = \"#{args[1]} of #{count} numbers\\n= #{asValue value} #{printUnits asUnits value}\"\n\n    # 99.9\n    else if line.match /^[0-9\\.eE-]+$/\n      value = patch +line\n      label = ''\n\n    # Label\n    else if args = line.match /^ *([\\w \\.%(){},&\\*\\/+-]+)$/\n      if output[args[1]]?\n        local[args[1]] = value = patch output[args[1]]\n      else if input[args[1]]?\n        local[args[1]] = value = patch input[args[1]]\n      else\n        color = '#edd'\n        comment = \"can't find value of '#{line}'\"\n\n    else\n      color = '#edd'\n      comment = \"can't parse '#{line}'\"\n\n  catch err\n    color = '#edd'\n    value = null\n    # console.log \"trouble\", inspect statck\n    comment = err.message\n  if state.caller? and color == '#edd'\n    state.caller.errors.push({message: comment})\n  state.list = list\n  state.list.push value if value? and ! isNaN asValue value\n  # console.log \"#{line} => #{inspect state.list} #{comment||''}\"\n  print state.report, value, hover, label||line, comment, color, state.linenum, unpatched\n  dispatch state, done\n\n\n############ interface ############\n\n\nbind = (div, item) ->\nemit = (div, item, done) ->\n\n  input = {}\n  output = {}\n\n  refresh = (state) ->\n    if state.show\n      state.div.addClass \"data\"\n      state.div.append $show = $ \"<div>\"\n      for each in state.show\n        $show.append $ \"\"\"\n          <p class=readout>#{each.readout}</p>\n          <p class=legend>#{each.legend}</p>\n        \"\"\"\n    else\n      text = state.report.join \"\\n\"\n      table = $('<table style=\"width:100%; background:#eee; padding:.8em; margin-bottom:5px;\"/>').html text\n      state.div.append table\n      if input['debug']\n        for label, value of state.output\n          state.div.append $(\"<p class=error>#{label} =><br> #{inspect value}</p>\")\n      if output['debug']\n        for label, value of state.input\n          state.div.append $(\"<p class=error>#{label} =><br> #{inspect value}</p>\")\n\n  scrub = (e, $td, $b) ->\n    patch = {}\n    if e.shiftKey\n        # from http://bugs.jquery.com/ticket/8523#comment:16\n      if typeof e.offsetX == \"undefined\"\n        e.offsetX = e.pageX - $(e.target).offset().left\n      console.log 'scrub', e\n      width = $td.width()/2\n      scale = Math.pow(2, (e.offsetX-width)/width)\n      scale = Math.min(2, Math.max(0.5, scale))\n      patch[$td.data('linenum')] = $td.data('value')*scale\n    state = {div, item, input, output, report:[], patch}\n    dispatch state, (state) ->\n      div.empty()\n      refresh state\n\n  handleScrub = (e) ->\n    $target = $(e.target)\n    if $target.is('td')\n      $(div).triggerHandler('thumb', $target.text())\n    if $target.is('td.value')\n      scrub e, $target, $target.find('b')\n    if $target.is('b')\n      scrub e, $target.parent(), $target\n\n  candidates = $(\".item:lt(#{$('.item').index(div)})\")\n  for elem in candidates\n    elem = $(elem)\n    if elem.hasClass 'radar-source'\n      _.extend input, elem.get(0).radarData()\n    else if elem.hasClass 'data'\n      _.extend input, elem.data('item')?.data?[0]\n\n  div.addClass 'radar-source'\n  div.get(0).radarData = -> output\n\n  div.mousemove (e) -> handleScrub e\n\n  div.dblclick (e) ->\n    if e.shiftKey\n      wiki.dialog \"JSON for Method plugin\",  $('<pre/>').text(JSON.stringify(item, null, 2))\n    else\n      wiki.textEditor state.div, state.item\n\n  state = {div, item, input, output, report:[]}\n  dispatch state, (state) ->\n    refresh state\n    setTimeout done, 10  # slower is better for firefox\n\nevaluate = (caller, item, input, done) ->\n  state = {caller: caller, item: item, input: input, output: {}}\n  dispatch state, (state, input) ->\n    done state.caller, state.output\n\nwindow.plugins.method = {emit, bind, eval:evaluate} if window?\nmodule.exports = {lexer, parser, dispatch, asValue, asUnits, hasUnits, simplify, parseUnits, parseRatio, parseLabel} if module?\n"
  ],
  "sourceRoot": ""
}