{
  "version": 3,
  "sources": [
    "reduce.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###\n * Federated Wiki : Reduce Plugin\n *\n * Licensed under the MIT license.\n * https://github.com/fedwiki/wiki-plugin-reduce/blob/master/LICENSE.txt\n###\n\n# interpret item's markup\n\nparse = (text) ->\n  program = {}\n  for line in text.split /\\n/\n    words = line.match /\\S+/g\n    if words is null or words.length < 1\n      # ignore it\n    else if words[0] is 'FOLD'\n      program.find = words[1..].join ' '\n    else if words[0] is 'WATCH'\n      program.watch = words[1..].join ' '\n    else if words[0] is 'SLIDE'\n      program.slide = words[1..].join ' '\n    else\n      program.error = {line, message: \"can't make sense of line\"}\n  program\n\nfind = (program, page) ->\n  titles = []\n  if program.find\n    for item in page.story\n      if item.type is 'pagefold'\n        parsing = item.text is program.find\n      else if parsing and item.type is 'paragraph'\n        if links = item.text.match /\\[\\[.*?\\]\\]/g\n          for link in links\n            titles.push {title: link.substr(2, link.length-4)}\n  titles\n\nformat = (program, titles) ->\n  rows = []\n  rows.push \"\"\"<tr><td><p class=\"error\">#{program.error.line} <span title=\"#{program.error.message}\">*\"\"\" if program.error\n  rows.push \"\"\"<tr><td>#{title.title}<td style=\"text-align:right;\">50\"\"\" for title in titles\n  rows.join \"\\n\"\n\n# translate to functional form (excel)\n\nemitrow = (context, label, funct) ->\n  context.vars[label] = context.ops.length if label\n  context.ops.push \"#{label or ''}\\t#{funct or ''}\"\n\ngenerate = (context, text) ->\n  loc = context.ops.length+1\n  for line in text.split /\\n/\n    console.log line, context\n    if args = line.match /^([0-9.eE-]+) +([\\w \\/%(){},&-]+)$/\n      emitrow context, args[2], args[1]\n    else if args = line.match /^([A-Z]+) +([\\w \\/%(){},&-]+)$/\n      emitrow context, args[2], \"=#{args[1]}(B#{loc}:B#{context.ops.length})\"\n      loc = context.ops.length\n    else if args = line.match /^([A-Z]+)$/\n      emitrow context, null, \"=#{args[1]}(B#{loc}:B#{context.ops.length})\"\n      loc = context.ops.length\n    else if args = line.match /^([0-9\\.eE-]+)$/\n      emitrow context, null, args[1]\n    else if args = line.match /^ *([\\w \\/%(){},&-]+)$/\n      emitrow context, args[1], \"=B#{context.vars[args[1]]+1}\"\n    else\n      emitrow context, \"can't parse '#{line}'\"\n\ncompile = (program, titles, done) ->\n  fetch = ($.getJSON \"/#{wiki.asSlug title.title}.json\" for title in titles)\n  $.when(fetch...).then (xhrs...) ->\n    context = {ops:[], vars:{}}\n    if program.slide\n      emitrow context, program.slide, 50\n    for xhr in xhrs\n      emitrow context\n      emitrow context, xhr[0].title\n      for item in xhr[0].story\n        switch item.type\n          when 'method' then generate context, item.text\n    console.log context\n    done context.ops.join(\"\\n\")\n\ncode = ($item, item, done) ->\n  program = parse item.text\n  page = $item.parents('.page').data('data')\n  titles = find program, page\n  compile program, titles, done\n\nprefetch = (titles, done) ->\n  fetch = ($.getJSON \"/#{wiki.asSlug title.title}.json\" for title in titles)\n  $.when(fetch...).then (xhrs...) ->\n    for i in [0..titles.length-1]\n      title = titles[i]\n      xhr = xhrs[i]\n      title.items =[]\n      for item in xhr[0].story\n        switch item.type\n          when 'method' then title.items.push(item)\n    done titles\n\nperformMethod = (state, done) ->\n  if state.methods.length > 0\n    state.plugin.eval state, state.methods.shift(), state.input, (state, output) ->\n      state.output = output\n     _.extend state.input, output\n     performMethod state, done\n  else\n    return done state\n\nperformTitle = (state, done) ->\n  if state.titles.length > 0\n    state.methods = (item for item in state.titles[0].items)\n    performMethod state, (state) ->\n      value = state.input[state.program.watch or state.program.slide]\n      state.titles[0].row.find('td:last').text value.toFixed 2\n      state.titles.shift()\n      performTitle state, done\n  else\n    return done state\n\nrecalculate = (program, input, titles, done) ->\n  wiki.getPlugin 'method', (plugin) ->\n    state = {program, plugin, input, titles:(t for t in titles), errors:[]}\n    performTitle state, done\n\n# render in the wiki page\n\nemit = ($item, item) ->\n  program = parse item.text\n  page = $item.parents('.page').data('data')\n  titles = find program, page\n\n  input = {}\n  output = {}\n\n  candidates = $(\".item:lt(#{$('.item').index($item)})\")\n  for elem in candidates\n    elem = $(elem)\n    if elem.hasClass 'radar-source'\n      _.extend input, elem.get(0).radarData()\n    else if elem.hasClass 'data'\n      _.extend input, elem.data('item').data[0]\n\n  $item.append (slider = $ '<div class=slider />')\n  if program.slide\n    nominal = output[program.slide] = +input[program.slide] or 50\n    sign = if nominal < 0 then -1 else 1\n    $item.addClass 'radar-source'\n    $item.get(0).radarData = -> output\n    slider.slider\n      animate: 'fast'\n      value: Math.abs(nominal)\n      max: Math.abs(nominal)*2\n      slide: (event, ui) ->\n        input[program.slide] = output[program.slide] = value = ui.value * sign\n        $item.find('tr:first td:last').text value\n        recalculate program, input, titles, ->\n          $item.trigger 'thumb', ui.value * sign\n  $item.append \"\"\"\n    <table style=\"width:100%; background:#eee; padding:.8em; margin-bottom:5px;\">\n      <tr><td>#{program.slide}<td style=\"text-align:right;\">#{nominal}\n    </table>\"\"\"\n  for title in titles\n    title.row = row = $ \"\"\"<tr><td>#{title.title}<td style=\"text-align:right;\">\"\"\"\n    $item.find('table').append title.row\n  prefetch titles, (titles) ->\n    input[program.slide] = nominal\n    recalculate program, input, titles, ->\n      console.log 'emit/prefetch/recalculate complete'\n\nbind = ($item, item) ->\n  $item.find('table').dblclick -> wiki.textEditor $item, item\n  $item.find('.slider').dblclick ->\n    code $item, item, (formula) ->\n      wiki.dialog \"Slider Computation\", \"<pre>#{formula}</pre>\"\n\nwindow.plugins.reduce = {emit, bind} if window?\nmodule.exports = {parse} if module?\n"
  ],
  "sourceRoot": ""
}