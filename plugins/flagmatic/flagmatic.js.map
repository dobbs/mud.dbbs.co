{
  "version": 3,
  "sources": [
    "flagmatic.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###\n * Federated Wiki : Flagmatic Plugin\n *\n * Copyright Ward Cunningham and other contributors\n * Licensed under the MIT license.\n * https://github.com/fedwiki/wiki-plugin-flagmatic/blob/master/LICENSE.txt\n###\n\n# The Flagmatic plugin offers a choice of new flags\n# item.choices selects how may, 40 by default\n\nhsltorgb = (h, s, l) ->\n  h = (h % 360) / 360\n  m2 = l * (s + 1)\n  m1 = ((l * 2) - m2)\n  hue = (num) ->\n    if num < 0\n      num += 1\n    else if num > 1\n      num -= 1\n    if (num * 6) < 1\n      m1 + (m2 - m1) * num * 6\n    else if (num * 2) < 1\n      m2\n    else if (num * 3) < 2\n      m1 + (m2 - m1) * (2/3 - num) * 6\n    else\n      m1\n  [(hue(h+1/3)*255), (hue(h) * 255), (hue(h - 1/3) * 255)]\n\npaint = (canvas) ->\n  ctx = canvas.getContext('2d')\n  light = hsltorgb(Math.random() * 360, .78, .4)\n  dark = hsltorgb(Math.random() * 360, .78, .55)\n  angle = 2 * (Math.random() - 0.5)\n  sin = Math.sin angle\n  cos = Math.cos angle\n  scale = (Math.abs(sin) + Math.abs(cos))\n  colprep = (col, p) ->\n    Math.floor(light[col]*p + dark[col]*(1-p))%255\n  for x in [0..31]\n    for y in [0..31]\n      p = if sin >= 0 then sin * x + cos * y else -sin * (31 - x) + cos * y\n      p = p / 31 / scale\n      ctx.fillStyle = \"rgba(#{colprep(0, p)}, #{colprep(1, p)}, #{colprep(2, p)}, 1)\"\n      ctx.fillRect(x, y, 1, 1)\n\ndelay = (msec, done) ->\n  setTimeout done, msec\n\nemit = ($item, item) ->\n  $item.append \"\"\"\n    <div style=\"width:93%; background:#eee; padding:.8em; margin-bottom:5px; text-align: center;\">\n      <span class=\"flags\"></span>\n      <p class=\"caption\">choose a new flag</p>\n    </div>\n  \"\"\"\n  $flags = $item.find '.flags'\n  for [1..item.choices || 40]\n    $flags.append $flag = $ '<canvas width=32 height=32 style=\"padding: 3px;\"/>'\n    paint $flag.get(0)\n\nbind = ($item, item) ->\n  $item.find('canvas').click  ->\n    data = this.toDataURL()\n    ajax = $.post '/favicon.png', {image: data}, (reply) ->\n    ajax.done ->\n      $item.find('.caption').text 'sweet'\n    ajax.error ->\n      $item.find('.caption').text 'ouch, logged in?'\n    delay 1500, ->\n      $item.find('.caption').text 'choose another flag'\n\n\nwindow.plugins.flagmatic = {emit, bind} if window?\nmodule.exports = {} if module?\n"
  ],
  "sourceRoot": ""
}