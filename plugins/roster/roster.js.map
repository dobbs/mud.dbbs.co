{
  "version": 3,
  "sources": [
    "roster.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###\n * Federated Wiki : Roster Plugin\n *\n * Licensed under the MIT license.\n * https://github.com/fedwiki/wiki-plugin-roster/blob/master/LICENSE.txt\n###\n#\n# Sample Roster Accessing Code\n#\n# Any item that exploses a roster will be identifed with class \"roster-source\".\n# These items offer the method getRoster() for retrieving the roster object.\n# Convention has roster consumers looking left for the nearest (or all) such objects.\n#\n#     items = $(\".item:lt(#{$('.item').index(div)})\")\n#     if (sources = items.filter \".roster-source\").size()\n#       choice = sources[sources.length-1]\n#       roster = choice.getRoster()\n#\n# This simplified version might be useful from the browser's javascript inspector.\n#\n#     $('.roster-source').get(0).getRoster()\n\nincludes = {}\n\nescape = (text) ->\n  text\n    .replace /&/g, '&amp;'\n    .replace /</g, '&lt;'\n    .replace />/g, '&gt;'\n\n\nload_sites = (uri) ->\n  tuples = uri.split ' '\n  while tuples.length\n    site = tuples.shift()\n    wiki.neighborhoodObject.registerNeighbor site\n\nparse = ($item, item) ->\n  roster = {all: []}\n  category = null\n  lineup = []\n  marks = {}\n  lines = []\n\n  if $item?\n    $item.addClass 'roster-source'\n    $item.get(0).getRoster = -> roster\n\n  more = item.text.split /\\r?\\n/\n\n  flag = (site) ->\n    roster.all.push site\n    lineup.push site\n    br = if lineup.length >= 18\n      newline()\n    else\n      ''\n    \"<img class=\\\"remote\\\" src=\\\"#{wiki.site(site).flag()}\\\" title=\\\"#{site}\\\" data-site=\\\"#{site}\\\" data-slug=\\\"welcome-visitors\\\">#{br}\"\n\n  newline = ->\n    if lineup.length\n      [sites, lineup] = [lineup, []]\n      if category?\n        roster[category] ||= []\n        roster[category].push site for site in sites\n      \"\"\" <a class='loadsites' href= \"/#\" data-sites=\"#{sites.join ' '}\" title=\"add these #{sites.length} sites\\nto neighborhood\">Â»</a><br> \"\"\"\n    else\n      \"<br>\"\n\n  cat = (name) ->\n    category = name\n\n  includeRoster = (line, siteslug) ->\n    if marks[siteslug]?\n      return \"<span>trouble looping #{siteslug}</span>\"\n    else\n      marks[siteslug] = true\n    if includes[siteslug]?\n      [].unshift.apply more, includes[siteslug]\n      ''\n    else\n      [site, slug] = siteslug.split('/')\n      wiki.site(site).get \"#{slug}.json\", (error, page) ->\n      # $.getJSON \"//#{siteslug}.json\", (page) ->\n        if error\n          console.log \"unable to get #{siteslug}\"\n        else\n          includes[siteslug] = [\"<span>trouble loading #{siteslug}</span>\"]\n          for i in page.story\n            if i.type is 'roster'\n              includes[siteslug] = i.text.split /\\r?\\n/\n              break\n          $item.empty()\n          emit $item, item\n          bind $item, item\n      \"<span>loading #{siteslug}</span>\"\n\n  includeReferences = (line, siteslug) ->\n    if includes[siteslug]?\n      [].unshift.apply more, includes[siteslug]\n      ''\n    else\n      [site, slug] = siteslug.split('/')\n      wiki.site(site).get \"#{slug}.json\", (error, page) ->\n      # $.getJSON \"//#{siteslug}.json\", (page) ->\n        if error\n          console.log \"unable to get #{siteslug}\"\n        else\n          includes[siteslug] = []\n          for i in page.story\n            if i.type is 'reference'\n              includes[siteslug].push i.site if includes[siteslug].indexOf(i.site) < 0\n          $item.empty()\n          emit $item, item\n          bind $item, item\n      \"<span>loading #{siteslug}</span>\"\n\n  expand = (text) ->\n    text\n      .replace /^$/, newline\n      .replace /^([a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)+)(:\\d+)?$/, flag\n      .replace /^localhost(:\\d+)?$/, flag\n      .replace /^ROSTER ([A-Za-z0-9.-:]+\\/[a-z0-9-]+)$/, includeRoster\n      .replace /^REFERENCES ([A-Za-z0-9.-:]+\\/[a-z0-9-]+)$/, includeReferences\n      .replace /^([^<].*)$/, cat\n\n  while more.length\n    lines.push expand more.shift()\n  lines.push newline()\n  lines.join ' '\n\nemit = ($item, item) ->\n  $item.append \"\"\"\n    <p style=\"background-color:#eee;padding:15px;\">\n      #{parse $item, item}\n    </p>\n  \"\"\"\n\nbind = ($item, item) ->\n  $item.dblclick (e) ->\n    if e.shiftKey\n      wiki.dialog \"Roster Categories\", \"<pre>#{JSON.stringify $item.get(0).getRoster(), null, 2}</pre>\"\n    else\n      wiki.textEditor $item, item\n  $item.find('.loadsites').click (e) ->\n    e.preventDefault()\n    e.stopPropagation()\n    console.log 'roster sites', $(e.target).data('sites').split(' ')\n    load_sites $(e.target).data('sites')\n\n\nwindow.plugins.roster = {emit, bind} if window?\nmodule.exports = {parse, includes} if module?\n"
  ],
  "sourceRoot": ""
}