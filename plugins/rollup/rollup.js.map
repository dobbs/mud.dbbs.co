{
  "version": 3,
  "sources": [
    "rollup.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###\n * Federated Wiki : Rollup Plugin\n *\n * Licensed under the MIT license.\n * https://github.com/fedwiki/wiki-plugin-rollup/blob/master/LICENSE.txt\n###\n\nwindow.plugins.rollup =\n  emit: (div, item) ->\n  bind: (div, item) ->\n\n    div.dblclick -> wiki.textEditor div, item\n\n    div.append \"\"\"\n      <style>\n        td.material {overflow:hidden;}\n        td.score {text-align:right; width:25px}\n      </style>\n    \"\"\"\n\n    asValue = (obj) ->\n      return NaN unless obj?\n      switch obj.constructor\n        when Number then obj\n        when String then +obj\n        when Array then asValue(obj[0])\n        when Object then asValue(obj.value)\n        when Function then obj()\n        else NaN\n\n    attach = (search) ->\n      wiki.log 'attach', wiki.getDataNodes div\n      for elem in wiki.getDataNodes div\n        wiki.log 'attach loop', $(elem).data('item').text\n        if (source = $(elem).data('item')).text.indexOf(search) >= 0\n          return source\n      throw new Error \"can't find dataset with caption #{search}\"\n\n    reference = attach \"Materials Summary\"\n\n    display = (calculated, state) ->\n      row = state.row\n      $row = state.$row\n      for col in reference.columns\n        if col == 'Material'\n          label = wiki.resolveLinks \"[[#{row.Material}]]\"\n          if calculated\n            if state.errors.length > 0\n              errors = (e.message.replace(/\"/g,\"'\") for e in state.errors).join \"\\n\"\n              $row.append \"\"\"<td class=\"material\">#{label} <span style=\"color:red;\" title=\"#{errors}\">âœ˜</span></td>\"\"\"\n            else\n              $row.append \"\"\"<td class=\"material\">#{label}</td>\"\"\"\n          else\n            $row.append \"\"\"<td class=\"material\">#{label}</td>\"\"\"\n        else\n          old = asValue row[col]\n          now = asValue state.input[col]\n          if calculated && now?\n            color = if old.toFixed(4) == now.toFixed(4)\n              'green'\n            else if old.toFixed(0) == now.toFixed(0)\n              'orange'\n            else\n              'red'\n            title = \"#{row.Material}\\n#{col}\\nold #{old.toFixed 4}\\nnow #{now.toFixed 4}\"\n            $row.append \"\"\"<td class=\"score\" title=\"#{title}\" data-thumb=\"#{col}\" style=\"color:#{color};\">#{old.toFixed 0}</td>\"\"\"\n          else\n            title = \"#{row.Material}\\n#{col}\\n#{old.toFixed 4}\"\n            $row.append \"\"\"<td class=\"score\" title=\"#{title}\" data-thumb=\"#{col}\">#{old.toFixed 0}</td>\"\"\"\n\n    perform = (state, plugin, done) ->\n      if state.methods.length > 0\n        plugin.eval state, state.methods.shift(), state.input, (state, output) ->\n           state.output = output\n           _.extend state.input, output\n           perform state, plugin, done\n      else\n        return done state\n\n    timeout = (delay, done) ->\n      setTimeout done, delay\n\n    recalculate = (delay, state, done) ->\n      timeout delay, ->\n        wiki.getPlugin 'method', (plugin) ->\n          $.getJSON \"/#{state.slug}.json\", (data) ->\n            state.methods = _.filter data.story, (item) -> item.type == 'method'\n            perform state, plugin, done\n\n    radar = (input={}) ->\n      candidates = $(\".item:lt(#{$('.item').index(div)})\")\n      output = _.extend {}, input\n      for elem in candidates\n        elem = $(elem)\n        if elem.hasClass 'radar-source'\n          _.extend output, elem.get(0).radarData()\n        else if elem.hasClass 'data'\n          _.extend output, elem.data('item').data[0]\n      return output\n\n    reindex = (results) ->\n      wiki.log 'reindex', results\n      sorted = _.sortBy results, (state) -> -asValue(state.input['Total Score'])\n      for state, index in sorted\n        state.input.Rank = \"#{index+1}\"\n      for state in results\n        state.$row.empty()\n        display true, state\n\n    div.append ($table = $ \"\"\"<table/>\"\"\")\n    rows = _.sortBy reference.data, (row) -> -asValue(row['Total Score'])\n    delay = 0\n    results = []\n    remaining = rows.length\n    for row in rows\n      slug = wiki.asSlug row.Material\n      $table.append ($row = $ \"\"\"<tr class=\"#{slug}\">\"\"\")\n      state = {$row, row, slug, input: radar(), errors: []}\n      display false, state\n      delay += 200\n      recalculate delay, state, (state)->\n        state.$row.empty()\n        state.input.Rank = state.row.Rank\n        display true, state\n        results.push state\n        remaining -= 1\n        reindex(results) unless remaining\n"
  ],
  "sourceRoot": ""
}