{
  "version": 3,
  "sources": [
    "line.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###\n * Federated Wiki : Line Plugin\n *\n * Licensed under the MIT license.\n * https://github.com/fedwiki/wiki-plugin-line/blob/master/LICENSE.txt\n###\n\nextent = (data, f) ->\n  [lo, hi] = [d3.min(data,f), d3.max(data,f)]\n  step = Math.pow 10, Math.floor Math.log(hi-lo) / Math.log(10)\n  [step*Math.floor(lo/step), step*Math.ceil(hi/step)]\n\n\nwindow.plugins.line =\n  bind: (div, item) ->\n  emit: (div, item) ->\n    wiki.getScript '/js/d3/d3.min.js', ->\n      w = 350\n      h = 275\n      p = 40\n      div.append '''\n        <style>\n          svg { font: 10px sans-serif; }\n          .rule line { stroke: #eee; shape-rendering: crispEdges; }\n          .rule line.axis { stroke: #000; }\n          .line { fill: none; stroke: steelblue; stroke-width: 1.5px; }\n          .line text { stroke-width: 1px; }\n          circle.line { fill: #fff; }\n        </style>\n      '''\n      candidates = $(\".item:lt(#{$('.item').index(div)})\")\n      if (who = candidates.filter \".sequence-source\").length\n        choice = who[who.length-1]\n        data = ({x,y:+y} for y,x in choice.getSequenceData())\n        x = d3.scale.linear().domain(extent data, (p)->p.x).range([ 0, w ])\n        y = d3.scale.linear().domain(extent data, (p)->p.y).range([ h, 0 ])\n      else\n        series = wiki.getData()\n        data = if (start = series[0][0]) > 1000000000000 # js time\n          ({t: new Date(x), x, y} for [x,y] in series)\n        else if start > 1000000000 # unix time\n          ({t: new Date(x*1000), x, y} for [x,y] in series)\n        else\n          ({t: new Date(p.Date), y:p.Price*1} for p in series)\n        x = d3.time.scale().domain(extent data, (p)->p.t).range([ 0, w ])\n        y = d3.scale.linear().domain(extent data, (p)->p.y).range([ h, 0 ])\n\n      lastThumb = null\n\n      $('.main').bind 'thumb', (e, thumb) ->\n        return if thumb is lastThumb\n        lastThumb = thumb\n        d3.selectAll(\"circle.line\")\n          .attr('r', (d) -> if d.x is thumb then 8 else 3.5)\n\n      vis = d3.select(div.get(0))\n        .data([data])\n        .append(\"svg:svg\")\n        .attr(\"width\", w + p * 2)\n        .attr(\"height\", h + p * 2)\n        .append(\"svg:g\")\n        .attr(\"transform\", \"translate(#{p},#{p})\")\n\n      xrules = vis.selectAll(\"g.xrule\")\n        .data(x.ticks(5))\n        .enter()\n        .append(\"svg:g\")\n        .attr(\"class\", \"rule\")\n      xrules.append(\"svg:line\")\n        .attr(\"x1\", x)\n        .attr(\"x2\", x)\n        .attr(\"y1\", 0)\n        .attr(\"y2\", h-1)\n      xrules.append(\"svg:text\")\n        .attr(\"x\", x)\n        .attr(\"y\", h + 3)\n        .attr(\"dy\", \".71em\")\n        .attr(\"text-anchor\", \"middle\")\n        .text(x.tickFormat(10))\n\n      yrules = vis.selectAll(\"g.yrule\")\n        .data(y.ticks(10))\n        .enter()\n        .append(\"svg:g\")\n        .attr(\"class\", \"rule\")\n      yrules.append(\"svg:line\")\n        .attr(\"class\", (d) -> (if d then null else \"axis\"))\n        .attr(\"y1\", y)\n        .attr(\"y2\", y)\n        .attr(\"x1\", 0)\n        .attr(\"x2\", w + 1)\n      yrules.append(\"svg:text\")\n        .attr(\"y\", y)\n        .attr(\"x\", -3)\n        .attr(\"dy\", \".35em\")\n        .attr(\"text-anchor\", \"end\")\n        .text(y.tickFormat(10))\n\n      line = d3.svg.line().x((d) -> x(d.t||d.x)).y((d) -> y(d.y))\n      vis.append(\"svg:path\")\n        .attr(\"class\", \"line\")\n        .attr(\"d\", line)\n      vis.selectAll(\"circle.line\")\n        .data(data)\n        .enter()\n        .append(\"svg:circle\")\n        .attr(\"class\", \"line\")\n        .attr(\"cx\", (d) -> x(d.t||d.x)).attr(\"cy\", (d) -> y(d.y)).attr(\"r\", 3.5)\n        .on('mouseover', (d) -> div.trigger('thumb', lastThumb = d.x); d3.select(this).attr('r', 8))\n        .on('mouseout',  -> d3.select(this).attr('r', 3.5))\n\n      if choice\n        $(choice).on 'sequence', (e, sequence) ->\n          data = ({x:xx,y:+yy} for yy,xx in sequence)\n          vis.selectAll('circle.line')\n            .data(data)\n            .transition()\n            .attr(\"cy\", (d) -> y(d.y))\n          vis.selectAll('path')\n            .data([data])\n            .transition()\n            .attr(\"d\", line);\n"
  ],
  "sourceRoot": ""
}